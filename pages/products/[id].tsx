import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useRecoilState } from "recoil";
import styled from "styled-components";
import QuantityButton from "../../components/common/QuantityButton";
import AppLayout from "../../components/layout/AppLayout";
import useCart from "../../hooks/useCart";
import { cartSelector } from "../../store/cart";
import { IsProduct } from "../../type";
import { IsSize, IsProductInCart } from "../../type";

const ProductsBlock = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
  @media (min-width: 605px) {
    flex-direction: row;
    .LeftArea {
      width: 50%;
    }
    .RightArea {
      padding: 20px 0;
    }
  }
  .LeftArea {
    .SortWrapper {
      span {
        font-size: 14px;
      }
      .ProductName {
        text-decoration: underline;
      }
    }

    .ImageWrapper {
      width: 100%;
      img {
        width: 100%;
        height: auto;
      }
    }
  }

  .RightArea {
    .TextWrapper {
      margin-bottom: 20px;
      h1 {
        font-weight: 400;
        font-size: 24px;
        margin-bottom: 10px;
      }
      .Price {
      }
    }

    .SizeSelector {
      display: flex;
      gap: 12px;
      margin-bottom: 10px;
      // SizeButton
    }

    .QuantityButtonWrapper {
      height: 30px;
      margin-bottom: 60px;
    }
    .BottomBar {
      width: 100%;
      height: 60px;
      background: white;
      position: fixed;
      bottom: 0;
      left: 0;
      padding: 10px;
      display: flex;
      gap: 20px;
      z-index: 1;
      button {
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
      }
      .ScrapBtn {
        width: 120px;
        background: white;
        border: 1px solid black;
      }
      // CartButton
    }
  }
`;

const SizeButton = styled.button<{ isSelected: boolean }>`
  width: 90px;
  height: 40px;
  background: white;
  outline: ${({ isSelected }) =>
    isSelected ? "1px solid black" : "1px solid #D9D9D9"};
  cursor: pointer;
  &:hover {
    /* background: grey; */
  }
`;

const CartButton = styled.button<{ isActivated: boolean }>`
  width: 100%;
  border: 1px solid black;
  background: ${({ isActivated }) => (isActivated ? "black" : "white")};
  color: ${({ isActivated }) => (isActivated ? "white" : "black")};
`;

export default function Products() {
  const { id } = useRouter().query;
  const [product, setProduct] = useState<IsProduct>();
  const { cart, addItem } = useCart();
  useEffect(() => {
    const fetchProduct = async () => {
      const res = await fetch(`/api/products/${id}`);
      if (res.ok) {
        const products = await res.json();
        console.log(products[0]);
        setProduct(products[0]);
      }
    };
    fetchProduct();
  }, [id]);

  const [currentSize, setCurrentSize] = useState<IsSize>();
  const onClickSizeBtn = (e: any) => {
    const { name } = e.target;
    console.log(name);
    setCurrentSize(() => name);
  };

  const [quantity, setQuantity] = useState(1);

  const router = useRouter();
  const onClickCart = () => {
    if (!currentSize) {
      alert("사이즈를 선택하지 않았습니다");
      return;
    }
    if (!product) return;
    if (
      cart.find(
        (product) => product.id === id && product.currentSize[0] === currentSize
      )
    ) {
      alert("카트에 있는 상품입니다!");
      return;
    }
    const newProduct: IsProductInCart = {
      id: product.id,
      src: product.src,
      name: product.name,
      price: product.price,
      currentSize: [currentSize],
      quantity: quantity,
    };
    addItem(newProduct);
    router.reload();
  };
  const onClickScrap = () => {};

  if (!product) return;
  return (
    <>
      <Head>
        <title>Shop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppLayout>
        <ProductsBlock>
          <div className="LeftArea">
            <div className="SortWrapper">
              <span>{"TEE > "}</span>
              <span className="ProductName">{product.name}</span>
            </div>

            <div className="ImageWrapper">
              <Image
                alt={product.name}
                src={product.src}
                width={400}
                height={400}
              ></Image>
            </div>
          </div>
          <div className="RightArea">
            <div className="TextWrapper">
              <h1>{product.name}</h1>
              <p className="Price">
                {product.price.toLocaleString("ko-KR", {
                  maximumFractionDigits: 4,
                }) + " 원"}
              </p>
            </div>

            <div className="SizeSelector">
              {product.currentSize.map((size) => (
                <SizeButton
                  key={size}
                  name={size}
                  isSelected={size === currentSize ? true : false}
                  onClick={onClickSizeBtn}
                >
                  {size.toUpperCase()}
                </SizeButton>
              ))}
            </div>

            <div className="QuantityButtonWrapper">
              {currentSize && (
                <QuantityButton
                  maxQuantity={3}
                  removeItem={() => setCurrentSize(undefined)}
                  quantity={quantity}
                  setQuantity={setQuantity}
                />
              )}
            </div>
            <div className="BottomBar">
              <button className="ScrapBtn" onClick={onClickScrap}>
                scrap
              </button>
              <CartButton
                className="CartBtn"
                isActivated={currentSize ? true : false}
                onClick={onClickCart}
              >
                cart
              </CartButton>
            </div>
          </div>
        </ProductsBlock>
      </AppLayout>
    </>
  );
}
