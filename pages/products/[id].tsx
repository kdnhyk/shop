import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import styled from "styled-components";
import Carousel from "../../components/common/Carousel";
import AppLayout from "../../components/layout/AppLayout";
import useCart from "../../hooks/useCart";
import { IsProduct } from "../../types";
import { IsSize, IsProductInCart } from "../../types";

const ProductsBlock = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
  @media (min-width: 605px) {
    flex-direction: row;
    justify-content: center;
    .LeftArea {
      width: 50%;
      max-width: 540px;
      height: auto;
    }
    .RightArea {
      width: 50%;
      max-width: 540px;
      padding: 20px 0;
    }
  }
  .LeftArea {
    .SortWrapper {
      margin-bottom: 4px;
      span {
        font-size: 14px;
      }
      .ProductName {
        text-decoration: underline;
      }
    }

    .ImageWrapper {
      width: 100%;
      img {
        width: 100%;
        height: auto;
      }
    }
  }

  .RightArea {
    display: flex;
    flex-direction: column;
    gap: 20px;
    .TextWrapper {
      display: flex;
      flex-direction: column;
      gap: 10px;
      h1 {
        font-weight: 400;
        font-size: 24px;
      }
      .Price {
      }
    }

    .SizeSelector {
      display: flex;
      gap: 12px;
      // SizeButton
    }
    // CartButton

    .Description {
      font-size: 13px;
    }
  }
`;

const SizeButton = styled.button<{ isSelected: boolean }>`
  width: 90px;
  height: 40px;
  background: white;
  border: ${({ isSelected }) =>
    isSelected ? "1px solid black" : "1px solid #D9D9D9"};
  cursor: pointer;
  &:hover {
    /* background: grey; */
  }
`;

const CartButton = styled.button<{ isActivated: boolean }>`
  width: 100%;
  height: 40px;
  border: 1px solid black;
  background: ${({ isActivated }) => (isActivated ? "black" : "white")};
  color: ${({ isActivated }) => (isActivated ? "white" : "black")};
  font-size: 14px;
  cursor: pointer;
`;

export default function Products() {
  const { id } = useRouter().query;
  const [product, setProduct] = useState<IsProduct>();
  const { cart, addItem } = useCart();
  useEffect(() => {
    const fetchProduct = async () => {
      const res = await fetch(`/api/products/${id}`);
      if (res.ok) {
        const products = await res.json();
        console.log(products[0]);
        setProduct(products[0]);
      }
    };
    fetchProduct();
  }, [id]);

  const [currentSize, setCurrentSize] = useState<IsSize | null>(null);
  const onClickSizeBtn = (e: any) => {
    const { name } = e.target;
    console.log(name);
    setCurrentSize(() => name);
  };

  const onClickCart = () => {
    if (!currentSize) {
      alert("사이즈를 선택하지 않았습니다");
      return;
    }
    if (!product) return;
    if (
      cart.find(
        (product) => product.id === id && product.currentSize[0] === currentSize
      )
    ) {
      alert("카트에 있는 상품입니다!");
      return;
    }
    const newProduct: IsProductInCart = {
      id: product.id,
      images: product.images,
      name: product.name,
      price: product.price,
      currentSize: [currentSize],
      quantity: 1,
      description: product.description,
    };
    addItem(newProduct);
    setCurrentSize(null);
  };

  if (!product) return;
  return (
    <>
      <Head>
        <title>Shop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppLayout>
        <ProductsBlock>
          <div className="LeftArea">
            <div className="SortWrapper">
              <span>{"TEE > "}</span>
              <span className="ProductName">{product.name}</span>
            </div>

            <div className="ImageWrapper">
              <Carousel images={product.images} />
              {/* <Image
                alt={product.name}
                src={product.images[0].src}
                width={400}
                height={400}
              ></Image> */}
            </div>
          </div>
          <div className="RightArea">
            <div className="TextWrapper">
              <h1>{product.name}</h1>
              <p className="Price">
                {product.price.toLocaleString("ko-KR", {
                  maximumFractionDigits: 4,
                }) + " 원"}
              </p>
            </div>

            <div className="SizeSelector">
              {product.currentSize.map((size) => (
                <SizeButton
                  key={size}
                  name={size}
                  isSelected={size === currentSize ? true : false}
                  onClick={onClickSizeBtn}
                >
                  {size.toUpperCase()}
                </SizeButton>
              ))}
            </div>
            <div className="BottomBar">
              <CartButton
                className="CartBtn"
                isActivated={currentSize ? true : false}
                onClick={onClickCart}
              >
                cart
              </CartButton>
            </div>
            <p className="Description">
              제품설명...Lorem Ipsum is simply dummy text of the printing and
              typesetting industry. Lorem Ipsum has been the industrys standard
              dummy text ever since the 1500s, when an unknown printer took a
              galley of type and scrambled it to make a type specimen book. It
              has survived not only five centuries, but also the leap into
              electronic typesetting, remaining essentially unchanged. It was
              popularised in the 1960s with the release of Letraset sheets
              containing Lorem Ipsum passages, and more recently with desktop
              publishing software like Aldus PageMaker including versions of
              Lorem Ipsum.
            </p>
          </div>
        </ProductsBlock>
      </AppLayout>
    </>
  );
}
